syntax = "proto3";

package proto;

message Void {}

enum Consistency {
  STRONG = 0;
  RELAXED_READS = 1;
}

message Query {
  string sql = 1;
  Consistency consistency = 2;
}

message QueryResults { repeated QueryRow rows = 1; }

message QueryRow { repeated string values = 1; }

// Sequence Paxos

message Entry {
  uint64 id = 1;
  string sql = 2;
}

message Ballot {
  uint32 n = 1;
  uint64 priority = 2;
  uint64 pid = 3;
}

message SyncItem {
  oneof syncitem {
    Entries entries = 1;
    bool snapshot = 2;
    bool none = 3;
  }

  message Entries { repeated Entry entries = 1; }
}

message StopSign {
  uint32 config_id = 1;
  repeated uint64 nodes = 2;
  repeated uint32 metadata = 3;
}

message PrepareReq {
  uint64 from = 1;
  uint64 to = 2;
}

message Prepare {
  uint64 from = 1;
  uint64 to = 2;
  Ballot n = 3;
  uint64 ld = 4;
  Ballot n_accepted = 5;
  uint64 la = 6;
}

message Promise {
  uint64 from = 1;
  uint64 to = 2;
  Ballot n = 3;
  Ballot n_accepted = 4;
  optional SyncItem sync_item = 5;
  uint64 ld = 6;
  uint64 la = 7;
  optional StopSign stopsign = 8;
}

message AcceptSync {
  uint64 from = 1;
  uint64 to = 2;
  Ballot n = 3;
  SyncItem sync_item = 4;
  uint64 sync_idx = 5;
  optional uint64 decided_idx = 6;
  optional StopSign stopsign = 7;
}

message FirstAccept {
  uint64 from = 1;
  uint64 to = 2;
  Ballot n = 3;
  repeated Entry entries = 4;
}

message AcceptDecide {
  uint64 from = 1;
  uint64 to = 2;
  Ballot n = 3;
  uint64 ld = 4;
  repeated Entry entries = 5;
}

message Accepted {
  uint64 from = 1;
  uint64 to = 2;
  Ballot n = 3;
  uint64 la = 4;
}

message Decide {
  uint64 from = 1;
  uint64 to = 2;
  Ballot n = 3;
  uint64 ld = 4;
}

message ProposalForward {
  uint64 from = 1;
  uint64 to = 2;
  repeated Entry proposals = 3;
}

message Trim { optional uint64 trim = 1; }

message Compaction {
  uint64 from = 1;
  uint64 to = 2;

  oneof compaction {
    Trim trim = 3;
    uint64 snapshot = 4;
  }
}

message ForwardCompaction {
  uint64 from = 1;
  uint64 to = 2;

  oneof compaction {
    Trim trim = 3;
    uint64 snapshot = 4;
  }
}

message AcceptStopSign {
  uint64 from = 1;
  uint64 to = 2;
  Ballot n = 3;
  StopSign stopsign = 4;
}

message AcceptedStopSign {
  uint64 from = 1;
  uint64 to = 2;
  Ballot n = 3;
}

message DecideStopSign {
  uint64 from = 1;
  uint64 to = 2;
  Ballot n = 3;
}

// BLE
message HeartbeatRequest {
  uint64 from = 1;
  uint64 to = 2;
  uint32 round = 3;
}

message HeartbeatReply {
  uint64 from = 1;
  uint64 to = 2;
  uint32 round = 3;
  Ballot ballot = 4;
  bool majority_connected = 5;
}

service RPC {
  rpc Execute(Query) returns (QueryResults);
  rpc PrepareRequest(PrepareReq) returns (Void);
  rpc PrepareMessage(Prepare) returns (Void);
  rpc PromiseMessage(Promise) returns (Void);
  rpc AcceptSyncMessage(AcceptSync) returns (Void);
  rpc FirstAcceptMessage(FirstAccept) returns (Void);
  rpc AcceptDecideMessage(AcceptDecide) returns (Void);
  rpc AcceptedMessage(Accepted) returns (Void);
  rpc DecideMessage(Decide) returns (Void);
  rpc ProposalForwardMessage(ProposalForward) returns (Void);
  rpc CompactionMessage(Compaction) returns (Void);
  rpc ForwardCompactionMessage(ForwardCompaction) returns (Void);
  rpc AcceptStopSignMessage(AcceptStopSign) returns (Void);
  rpc AcceptedStopSignMessage(AcceptedStopSign) returns (Void);
  rpc DecideStopSignMessage(DecideStopSign) returns (Void);

  rpc HeartbeatRequestMessage(HeartbeatRequest) returns (Void);
  rpc HeartbeatReplyMessage(HeartbeatReply) returns (Void);
}
